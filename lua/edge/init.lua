local M = {}

local function set_hl_groups()
    local hl = vim.api.nvim_set_hl

    hl(0, "Normal", { fg = "#4b505b", bg = "#fafafa" })
    hl(0, "NormalNC", { fg = "#4b505b", bg = "#fafafa" })
    hl(0, "Terminal", { fg = "#4b505b", bg = "#fafafa" })
    hl(0, "EndOfBuffer", { fg = "#dde2e7", bg = "#fafafa" })
    hl(0, "Folded", { fg = "#8790a0", bg = "#eef1f4" })
    hl(0, "Toolbarline", { fg = "#4b505b", bg = "#e8ebf0" })
    hl(0, "SignColumn", { fg = "#4b505b", bg = "NONE" })
    hl(0, "FoldColumn", { fg = "#bac3cb", bg = "NONE" })
    hl(0, "IncSearch", { fg = "#fafafa", bg = "#6996e0" })
    hl(0, "Search", { fg = "#fafafa", bg = "#76af6f" })
    hl(0, "CurSearch", { link = "IncSearch" })
    hl(0, "ColorColumn", { fg = "NONE", bg = "#eef1f4" })
    hl(0, "Conceal", { fg = "#bac3cb", bg = "NONE" })
    hl(0, "Cursor", { fg = "NONE", bg = "NONE", reverse = true })
    hl(0, "vCursor", { link = "Cursor" })
    hl(0, "iCursor", { link = "Cursor" })
    hl(0, "lCursor", { link = "Cursor" })
    hl(0, "CursorIM", { link = "Cursor" })
    hl(0, "CursorLine", { fg = "NONE", bg = "#eef1f4" })
    hl(0, "CursorColumn", { fg = "NONE", bg = "#eef1f4" })
    hl(0, "LineNr", { fg = "#bac3cb", bg = "NONE" })
    hl(0, "CursorLineNr", { fg = "#8790a0", bg = "NONE" })
    hl(0, "DiffAdd", { fg = "NONE", bg = "#e5eee4" })
    hl(0, "DiffChange", { fg = "NONE", bg = "#e3eaf6" })
    hl(0, "DiffDelete", { fg = "NONE", bg = "#f6e4e4" })
    hl(0, "DiffText", { fg = "#fafafa", bg = "#5079be" })
    hl(0, "Directory", { fg = "#5079be", bg = "NONE" })
    hl(0, "ErrorMsg", { fg = "#d05858", bg = "NONE", bold = true, underline = true })
    hl(0, "WarningMsg", { fg = "#be7e05", bg = "NONE", bold = true })
    hl(0, "ModeMsg", { fg = "#4b505b", bg = "NONE", bold = true })
    hl(0, "MoreMsg", { fg = "#5079be", bg = "NONE", bold = true })
    hl(0, "MatchParen", { fg = "NONE", bg = "#dde2e7" })
    hl(0, "NonText", { fg = "#dde2e7", bg = "NONE" })
    hl(0, "Whitespace", { fg = "#dde2e7", bg = "NONE" })
    hl(0, "SpecialKey", { fg = "#dde2e7", bg = "NONE" })
    hl(0, "Pmenu", { fg = "#4b505b", bg = "#e8ebf0" })
    hl(0, "PmenuSbar", { fg = "NONE", bg = "#e8ebf0" })
    hl(0, "PmenuSel", { fg = "#fafafa", bg = "#6996e0" })
    hl(0, "PmenuKind", { fg = "#b05ccc", bg = "#e8ebf0" })
    hl(0, "PmenuExtra", { fg = "#8790a0", bg = "#e8ebf0" })
    hl(0, "WildMenu", { link = "PmenuSel" })
    hl(0, "PmenuThumb", { fg = "NONE", bg = "#bcc5cf" })
    hl(0, "NormalFloat", { fg = "#4b505b", bg = "#e8ebf0" })
    hl(0, "FloatBorder", { fg = "#8790a0", bg = "#e8ebf0" })
    hl(0, "Question", { fg = "#be7e05", bg = "NONE" })
    hl(0, "SpellBad", { fg = "NONE", bg = "NONE", sp = "#d05858", undercurl = true })
    hl(0, "SpellCap", { fg = "NONE", bg = "NONE", sp = "#be7e05", undercurl = true })
    hl(0, "SpellLocal", { fg = "NONE", bg = "NONE", sp = "#5079be", undercurl = true })
    hl(0, "SpellRare", { fg = "NONE", bg = "NONE", sp = "#b05ccc", undercurl = true })
    hl(0, "StatusLine", { fg = "#4b505b", bg = "#e8ebf0" })
    hl(0, "StatusLineTerm", { fg = "#4b505b", bg = "#e8ebf0" })
    hl(0, "StatusLineNC", { fg = "#8790a0", bg = "#eef1f4" })
    hl(0, "StatusLineTermNC", { fg = "#8790a0", bg = "#eef1f4" })
    hl(0, "TabLine", { fg = "#4b505b", bg = "#e8ebf0" })
    hl(0, "TabLineFill", { fg = "#8790a0", bg = "#e8ebf0" })
    hl(0, "TabLineSel", { fg = "#fafafa", bg = "#6996e0" })
    hl(0, "VertSplit", { fg = "#dde2e7", bg = "NONE" })
    hl(0, "WinSeparator", { link = "VertSplit" })
    hl(0, "Visual", { fg = "NONE", bg = "#e8ebf0" })
    hl(0, "VisualNOS", { fg = "NONE", bg = "#e8ebf0", underline = true })
    hl(0, "QuickFixLine", { fg = "#b05ccc", bg = "NONE", bold = true })
    hl(0, "Debug", { fg = "#be7e05", bg = "NONE" })
    hl(0, "debugPC", { fg = "#fafafa", bg = "#76af6f" })
    hl(0, "debugBreakpoint", { fg = "#fafafa", bg = "#e17373" })
    hl(0, "ToolbarButton", { fg = "#fafafa", bg = "#bf75d6" })
    hl(0, "Substitute", { fg = "#fafafa", bg = "#be7e05" })
    hl(0, "WinBarNC", { link = "Grey" })
    hl(0, "DiagnosticFloatingError", { link = "ErrorFloat" })
    hl(0, "DiagnosticFloatingWarn", { link = "WarningFloat" })
    hl(0, "DiagnosticFloatingInfo", { link = "InfoFloat" })
    hl(0, "DiagnosticFloatingHint", { link = "HintFloat" })
    hl(0, "DiagnosticError", { link = "ErrorText" })
    hl(0, "DiagnosticWarn", { link = "WarningText" })
    hl(0, "DiagnosticInfo", { link = "InfoText" })
    hl(0, "DiagnosticHint", { link = "HintText" })
    hl(0, "DiagnosticVirtualTextError", { link = "VirtualTextError" })
    hl(0, "DiagnosticVirtualTextWarn", { link = "VirtualTextWarning" })
    hl(0, "DiagnosticVirtualTextInfo", { link = "VirtualTextInfo" })
    hl(0, "DiagnosticVirtualTextHint", { link = "VirtualTextHint" })
    hl(0, "DiagnosticUnderlineError", { link = "ErrorText" })
    hl(0, "DiagnosticUnderlineWarn", { link = "WarningText" })
    hl(0, "DiagnosticUnderlineInfo", { link = "InfoText" })
    hl(0, "DiagnosticUnderlineHint", { link = "HintText" })
    hl(0, "DiagnosticSignError", { link = "RedSign" })
    hl(0, "DiagnosticSignWarn", { link = "YellowSign" })
    hl(0, "DiagnosticSignInfo", { link = "BlueSign" })
    hl(0, "DiagnosticSignHint", { link = "GreenSign" })
    hl(0, "LspDiagnosticsFloatingError", { link = "DiagnosticFloatingError" })
    hl(0, "LspDiagnosticsFloatingWarning", { link = "DiagnosticFloatingWarn" })
    hl(0, "LspDiagnosticsFloatingInformation", { link = "DiagnosticFloatingInfo" })
    hl(0, "LspDiagnosticsFloatingHint", { link = "DiagnosticFloatingHint" })
    hl(0, "LspDiagnosticsDefaultError", { link = "DiagnosticError" })
    hl(0, "LspDiagnosticsDefaultWarning", { link = "DiagnosticWarn" })
    hl(0, "LspDiagnosticsDefaultInformation", { link = "DiagnosticInfo" })
    hl(0, "LspDiagnosticsDefaultHint", { link = "DiagnosticHint" })
    hl(0, "LspDiagnosticsVirtualTextError", { link = "DiagnosticVirtualTextError" })
    hl(0, "LspDiagnosticsVirtualTextWarning", { link = "DiagnosticVirtualTextWarn" })
    hl(0, "LspDiagnosticsVirtualTextInformation", { link = "DiagnosticVirtualTextInfo" })
    hl(0, "LspDiagnosticsVirtualTextHint", { link = "DiagnosticVirtualTextHint" })
    hl(0, "LspDiagnosticsUnderlineError", { link = "DiagnosticUnderlineError" })
    hl(0, "LspDiagnosticsUnderlineWarning", { link = "DiagnosticUnderlineWarn" })
    hl(0, "LspDiagnosticsUnderlineInformation", { link = "DiagnosticUnderlineInfo" })
    hl(0, "LspDiagnosticsUnderlineHint", { link = "DiagnosticUnderlineHint" })
    hl(0, "LspDiagnosticsSignError", { link = "DiagnosticSignError" })
    hl(0, "LspDiagnosticsSignWarning", { link = "DiagnosticSignWarn" })
    hl(0, "LspDiagnosticsSignInformation", { link = "DiagnosticSignInfo" })
    hl(0, "LspDiagnosticsSignHint", { link = "DiagnosticSignHint" })
    hl(0, "LspReferenceText", { link = "CurrentWord" })
    hl(0, "LspReferenceRead", { link = "CurrentWord" })
    hl(0, "LspReferenceWrite", { link = "CurrentWord" })
    hl(0, "LspCodeLens", { link = "VirtualTextInfo" })
    hl(0, "LspCodeLensSeparator", { link = "VirtualTextHint" })
    hl(0, "LspSignatureActiveParameter", { link = "Search" })
    hl(0, "TermCursor", { link = "Cursor" })
    hl(0, "healthError", { link = "Red" })
    hl(0, "healthSuccess", { link = "Green" })
    hl(0, "healthWarning", { link = "Yellow" })
    hl(0, "Type", { fg = "#d05858", bg = "NONE" })
    hl(0, "Structure", { fg = "#d05858", bg = "NONE" })
    hl(0, "StorageClass", { fg = "#d05858", bg = "NONE" })
    hl(0, "Identifier", { fg = "#3a8b84", bg = "NONE" })
    hl(0, "Constant", { fg = "#be7e05", bg = "NONE" })
    hl(0, "PreProc", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "PreCondit", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "Include", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "Keyword", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "Define", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "Typedef", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "Exception", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "Conditional", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "Repeat", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "Statement", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "Macro", { fg = "#be7e05", bg = "NONE" })
    hl(0, "Error", { fg = "#d05858", bg = "NONE" })
    hl(0, "Label", { fg = "#be7e05", bg = "NONE" })
    hl(0, "Special", { fg = "#be7e05", bg = "NONE" })
    hl(0, "SpecialChar", { fg = "#be7e05", bg = "NONE" })
    hl(0, "Boolean", { fg = "#608e32", bg = "NONE" })
    hl(0, "String", { fg = "#608e32", bg = "NONE" })
    hl(0, "Character", { fg = "#608e32", bg = "NONE" })
    hl(0, "Number", { fg = "#d05858", bg = "NONE" })
    hl(0, "Float", { fg = "#d05858", bg = "NONE" })
    hl(0, "Function", { fg = "#5079be", bg = "NONE" })
    hl(0, "Operator", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "Title", { fg = "#5079be", bg = "NONE", bold = true })
    hl(0, "Tag", { fg = "#be7e05", bg = "NONE" })
    hl(0, "Delimiter", { fg = "#4b505b", bg = "NONE" })
    hl(0, "Todo", { fg = "#fafafa", bg = "#5079be", bold = true })
    hl(0, "Comment", { fg = "#8790a0", bg = "NONE" })
    hl(0, "SpecialComment", { fg = "#8790a0", bg = "NONE" })
    hl(0, "Fg", { fg = "#4b505b", bg = "NONE" })
    hl(0, "Grey", { fg = "#8790a0", bg = "NONE" })
    hl(0, "Red", { fg = "#d05858", bg = "NONE" })
    hl(0, "Yellow", { fg = "#be7e05", bg = "NONE" })
    hl(0, "Green", { fg = "#608e32", bg = "NONE" })
    hl(0, "Cyan", { fg = "#3a8b84", bg = "NONE" })
    hl(0, "Blue", { fg = "#5079be", bg = "NONE" })
    hl(0, "Purple", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "RedItalic", { fg = "#d05858", bg = "NONE", italic = true })
    hl(0, "YellowItalic", { fg = "#be7e05", bg = "NONE", italic = true })
    hl(0, "GreenItalic", { fg = "#608e32", bg = "NONE", italic = true })
    hl(0, "CyanItalic", { fg = "#3a8b84", bg = "NONE", italic = true })
    hl(0, "BlueItalic", { fg = "#5079be", bg = "NONE", italic = true })
    hl(0, "PurpleItalic", { fg = "#b05ccc", bg = "NONE", italic = true })
    hl(0, "RedSign", { fg = "#d05858", bg = "NONE" })
    hl(0, "YellowSign", { fg = "#be7e05", bg = "NONE" })
    hl(0, "GreenSign", { fg = "#608e32", bg = "NONE" })
    hl(0, "CyanSign", { fg = "#3a8b84", bg = "NONE" })
    hl(0, "BlueSign", { fg = "#5079be", bg = "NONE" })
    hl(0, "PurpleSign", { fg = "#b05ccc", bg = "NONE" })
    hl(0, "ErrorText", { fg = "NONE", bg = "NONE", sp = "#d05858", undercurl = true })
    hl(0, "WarningText", { fg = "NONE", bg = "NONE", sp = "#be7e05", undercurl = true })
    hl(0, "InfoText", { fg = "NONE", bg = "NONE", sp = "#5079be", undercurl = true })
    hl(0, "HintText", { fg = "NONE", bg = "NONE", sp = "#608e32", undercurl = true })
    hl(0, "ErrorLine", { fg = "NONE", bg = "NONE" })
    hl(0, "WarningLine", { fg = "NONE", bg = "NONE" })
    hl(0, "InfoLine", { fg = "NONE", bg = "NONE" })
    hl(0, "HintLine", { fg = "NONE", bg = "NONE" })
    hl(0, "VirtualTextWarning", { link = "Grey" })
    hl(0, "VirtualTextError", { link = "Grey" })
    hl(0, "VirtualTextInfo", { link = "Grey" })
    hl(0, "VirtualTextHint", { link = "Grey" })
    hl(0, "ErrorFloat", { fg = "#d05858", bg = "#e8ebf0" })
    hl(0, "WarningFloat", { fg = "#be7e05", bg = "#e8ebf0" })
    hl(0, "InfoFloat", { fg = "#5079be", bg = "#e8ebf0" })
    hl(0, "HintFloat", { fg = "#608e32", bg = "#e8ebf0" })
    hl(0, "CurrentWord", { fg = "#fafafa", bg = "#608e32" })
    hl(0, "@annotation", { link = "Purple" })
    hl(0, "@attribute", { link = "Yellow" })
    hl(0, "@boolean", { link = "Red" })
    hl(0, "@character", { link = "Green" })
    hl(0, "@character.special", { link = "SpecialChar" })
    hl(0, "@comment", { link = "Comment" })
    hl(0, "@conceal", { link = "Grey" })
    hl(0, "@conditional", { link = "Purple" })
    hl(0, "@constant", { link = "Red" })
    hl(0, "@constant.builtin", { link = "Red" })
    hl(0, "@constant.macro", { link = "Cyan" })
    hl(0, "@constructor", { link = "Blue" })
    hl(0, "@debug", { link = "Debug" })
    hl(0, "@define", { link = "Define" })
    hl(0, "@error", { link = "Error" })
    hl(0, "@exception", { link = "Purple" })
    hl(0, "@field", { link = "Cyan" })
    hl(0, "@float", { link = "Red" })
    hl(0, "@function", { link = "Blue" })
    hl(0, "@function.builtin", { link = "Blue" })
    hl(0, "@function.call", { link = "Blue" })
    hl(0, "@function.macro", { link = "Blue" })
    hl(0, "@include", { link = "Purple" })
    hl(0, "@keyword", { link = "Purple" })
    hl(0, "@keyword.function", { link = "Purple" })
    hl(0, "@keyword.operator", { link = "Purple" })
    hl(0, "@keyword.return", { link = "Purple" })
    hl(0, "@label", { link = "Purple" })
    hl(0, "@math", { link = "Green" })
    hl(0, "@method", { link = "Blue" })
    hl(0, "@method.call", { link = "Blue" })
    hl(0, "@namespace", { link = "Yellow" })
    hl(0, "@none", { link = "Fg" })
    hl(0, "@number", { link = "Red" })
    hl(0, "@operator", { link = "Purple" })
    hl(0, "@parameter", { link = "Fg" })
    hl(0, "@parameter.reference", { link = "Red" })
    hl(0, "@preproc", { link = "PreProc" })
    hl(0, "@property", { link = "Cyan" })
    hl(0, "@punctuation.bracket", { link = "Grey" })
    hl(0, "@punctuation.delimiter", { link = "Grey" })
    hl(0, "@punctuation.special", { link = "Yellow" })
    hl(0, "@repeat", { link = "Purple" })
    hl(0, "@storageclass", { link = "Purple" })
    hl(0, "@storageclass.lifetime", { link = "Purple" })
    hl(0, "@strike", { link = "Grey" })
    hl(0, "@string", { link = "Green" })
    hl(0, "@string.escape", { link = "Yellow" })
    hl(0, "@string.regex", { link = "Yellow" })
    hl(0, "@string.special", { link = "SpecialChar" })
    hl(0, "@symbol", { link = "Red" })
    hl(0, "@tag", { link = "Red" })
    hl(0, "@tag.attribute", { link = "Blue" })
    hl(0, "@tag.delimiter", { link = "Purple" })
    hl(0, "@text", { link = "Green" })
    hl(0, "@text.danger", { fg = "#fafafa", bg = "#d05858", bold = true })
    hl(0, "@text.diff.add", { link = "diffAdded" })
    hl(0, "@text.diff.delete", { link = "diffRemoved" })
    hl(0, "@text.emphasis", { fg = "NONE", bg = "NONE", italic = true })
    hl(0, "@text.environment", { link = "Macro" })
    hl(0, "@text.environment.name", { link = "Type" })
    hl(0, "@text.literal", { link = "String" })
    hl(0, "@text.math", { link = "@math" })
    hl(0, "@text.note", { fg = "#fafafa", bg = "#608e32", bold = true })
    hl(0, "@text.reference", { link = "Constant" })
    hl(0, "@text.strike", { link = "Grey" })
    hl(0, "@text.strong", { fg = "NONE", bg = "NONE", bold = true })
    hl(0, "@text.title", { link = "Title" })
    hl(0, "@text.todo", { link = "Todo" })
    hl(0, "@text.todo.checked", { link = "Green" })
    hl(0, "@text.todo.unchecked", { link = "Ignore" })
    hl(0, "@text.underline", { fg = "NONE", bg = "NONE", underline = true })
    hl(0, "@text.uri", { link = "markdownUrl" })
    hl(0, "@text.warning", { fg = "#fafafa", bg = "#be7e05", bold = true })
    hl(0, "@todo", { link = "Todo" })
    hl(0, "@type", { link = "Yellow" })
    hl(0, "@type.builtin", { link = "Yellow" })
    hl(0, "@type.definition", { link = "Yellow" })
    hl(0, "@type.qualifier", { link = "Purple" })
    hl(0, "@uri", { link = "markdownUrl" })
    hl(0, "@variable", { link = "Fg" })
    hl(0, "@variable.builtin", { link = "Cyan" })
    hl(0, "@lsp.type.class", { link = "@type" })
    hl(0, "@lsp.type.comment", { link = "@comment" })
    hl(0, "@lsp.type.decorator", { link = "@function" })
    hl(0, "@lsp.type.enum", { link = "@type" })
    hl(0, "@lsp.type.enumMember", { link = "@property" })
    hl(0, "@lsp.type.events", { link = "@label" })
    hl(0, "@lsp.type.function", { link = "@function" })
    hl(0, "@lsp.type.interface", { link = "@type" })
    hl(0, "@lsp.type.keyword", { link = "@keyword" })
    hl(0, "@lsp.type.macro", { link = "@constant.macro" })
    hl(0, "@lsp.type.method", { link = "@method" })
    hl(0, "@lsp.type.modifier", { link = "@type.qualifier" })
    hl(0, "@lsp.type.namespace", { link = "@namespace" })
    hl(0, "@lsp.type.number", { link = "@number" })
    hl(0, "@lsp.type.operator", { link = "@operator" })
    hl(0, "@lsp.type.parameter", { link = "@parameter" })
    hl(0, "@lsp.type.property", { link = "@property" })
    hl(0, "@lsp.type.regexp", { link = "@string.regex" })
    hl(0, "@lsp.type.string", { link = "@string" })
    hl(0, "@lsp.type.struct", { link = "@type" })
    hl(0, "@lsp.type.type", { link = "@type" })
    hl(0, "@lsp.type.typeParameter", { link = "@type.definition" })
    hl(0, "@lsp.type.variable", { link = "@variable" })
    hl(0, "DiagnosticUnnecessary", { link = "WarningText" })
    hl(0, "TelescopeBorder", { link = "Grey" })
    hl(0, "TelescopeTitle", { link = "Fg" })
    hl(0, "TelescopeSelection", { link = "DiffChange" })
    hl(0, "IndentBlanklineContextChar", { link = "Grey" })
    hl(0, "IndentBlanklineChar", { link = "NonText" })
    hl(0, "GitSignsAdd", { link = "GreenSign" })
    hl(0, "GitSignsChange", { link = "BlueSign" })
    hl(0, "GitSignsDelete", { link = "RedSign" })
    hl(0, "GitSignsAddNr", { link = "Green" })
    hl(0, "GitSignsChangeNr", { link = "Blue" })
    hl(0, "GitSignsDeleteNr", { link = "Red" })
    hl(0, "GitSignsAddLn", { link = "DiffAdd" })
    hl(0, "GitSignsChangeLn", { link = "DiffChange" })
    hl(0, "GitSignsDeleteLn", { link = "DiffDelete" })
    hl(0, "GitSignsCurrentLineBlame", { link = "Grey" })
end

function M.init()
    vim.cmd("hi clear")

    if vim.fn.exists("syntax_on") then
        vim.cmd("syntax reset")
    end

    vim.o.background = "light"
    vim.o.termguicolors = true
    vim.g.colors_name = "edge"

    set_hl_groups()
end

return M
